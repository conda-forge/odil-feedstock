diff --git a/src/odil/endian.cpp b/src/odil/endian.cpp
new file mode 100644
index 0000000..7160f86
--- /dev/null
+++ b/src/odil/endian.cpp
@@ -0,0 +1,23 @@
+/*************************************************************************
+ * odil - Copyright (C) Universite de Strasbourg
+ * Distributed under the terms of the CeCILL-B license, as published by
+ * the CEA-CNRS-INRIA. Refer to the LICENSE file or to
+ * http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
+ * for details.
+ ************************************************************************/
+
+#include "odil/endian.h"
+
+#include <cstdint>
+
+namespace odil
+{
+
+ByteOrdering get_endianness()
+{
+    uint16_t const word = 0x0201;
+    uint8_t const * bytes = reinterpret_cast<uint8_t const *>(&word);
+    return (bytes[0] == 1)?ByteOrdering::LittleEndian:ByteOrdering::BigEndian;
+}
+
+}
diff --git a/src/odil/endian.h b/src/odil/endian.h
index 141fdaa..9de1b3c 100644
--- a/src/odil/endian.h
+++ b/src/odil/endian.h
@@ -9,8 +9,6 @@
 #ifndef _05d00816_25d0_41d1_9768_afd39f0503da
 #define _05d00816_25d0_41d1_9768_afd39f0503da
 
-#include <boost/detail/endian.hpp>
-
 #define ODIL_SWAP \
     auto source = reinterpret_cast<char const *>(&value); \
     auto const end = source + sizeof(value); \
@@ -32,52 +30,64 @@ enum class ByteOrdering
     BigEndian
 };
 
+ByteOrdering get_endianness();
+
+static ByteOrdering const byte_ordering{get_endianness()};
+
 template<typename T>
 T host_to_big_endian(T const & value)
 {
-#ifdef BOOST_LITTLE_ENDIAN
-    ODIL_SWAP
-
-    return result;
-#else
-    return value;
-#endif
+    if(byte_ordering == ByteOrdering::LittleEndian)
+    {
+        ODIL_SWAP
+        return result;
+    }
+    else
+    {
+        return value;
+    }
 }
 
 template<typename T>
 T host_to_little_endian(T const & value)
 {
-#ifdef BOOST_BIG_ENDIAN
-    ODIL_SWAP
-
-    return result;
-#else
-    return value;
-#endif
+    if(byte_ordering == ByteOrdering::BigEndian)
+    {
+        ODIL_SWAP
+        return result;
+    }
+    else
+    {
+        return value;
+    }
 }
 
 template<typename T>
 T big_endian_to_host(T const & value)
 {
-#ifdef BOOST_LITTLE_ENDIAN
-    ODIL_SWAP
-
-    return result;
-#else
-    return value;
-#endif
+    if(byte_ordering == ByteOrdering::LittleEndian)
+    {
+        ODIL_SWAP
+        return result;
+    }
+    else
+    {
+        return value;
+    }
 }
 
 template<typename T>
 T little_endian_to_host(T const & value)
 {
-#ifdef BOOST_BIG_ENDIAN
-    ODIL_SWAP
-
-    return result;
-#else
-    return value;
-#endif
+    if(byte_ordering == ByteOrdering::BigEndian)
+    {
+        ODIL_SWAP
+        return result;
+    }
+    else
+    {
+        return value;
+    }
 }
 
 }
